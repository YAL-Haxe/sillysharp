package cs.system;

@:nativeGen @:abstract @:libType @:csNative @:native("System.Convert") extern final class Convert {
	@:readOnly static var DBNull(default,never) : Dynamic;
	@:overload(function(value : Dynamic, conversionType : Type) : Dynamic {})
	@:overload(function(value : Dynamic, typeCode : TypeCode, provider : IFormatProvider) : Dynamic {})
	@:overload(function(value : Dynamic, conversionType : Type, provider : IFormatProvider) : Dynamic {})
	static function ChangeType(value : Dynamic, typeCode : TypeCode) : Dynamic;
	static function FromBase64CharArray(inArray : cs.NativeArray<cs.types.Char16>, offset : Int, length : Int) : cs.NativeArray<cs.types.UInt8>;
	static function FromBase64String(s : String) : cs.NativeArray<cs.types.UInt8>;
	static function GetTypeCode(value : Dynamic) : TypeCode;
	static function IsDBNull(value : Dynamic) : Bool;
	@:overload(function(inArray : cs.NativeArray<cs.types.UInt8>, offsetIn : Int, length : Int, outArray : cs.NativeArray<cs.types.Char16>, offsetOut : Int) : Int {})
	static function ToBase64CharArray(inArray : cs.NativeArray<cs.types.UInt8>, offsetIn : Int, length : Int, outArray : cs.NativeArray<cs.types.Char16>, offsetOut : Int, options : Base64FormattingOptions) : Int;
	@:overload(function(inArray : cs.NativeArray<cs.types.UInt8>) : String {})
	@:overload(function(inArray : cs.NativeArray<cs.types.UInt8>, offset : Int, length : Int, options : Base64FormattingOptions) : String {})
	@:overload(function(inArray : cs.NativeArray<cs.types.UInt8>, options : Base64FormattingOptions) : String {})
	static function ToBase64String(inArray : cs.NativeArray<cs.types.UInt8>, offset : Int, length : Int) : String;
	@:overload(function(value : Bool) : Bool {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : Bool {})
	@:overload(function(value : Dynamic) : Bool {})
	@:overload(function(value : cs.types.UInt16) : Bool {})
	@:overload(function(value : cs.types.UInt64) : Bool {})
	@:overload(function(value : UInt) : Bool {})
	@:overload(function(value : String, provider : IFormatProvider) : Bool {})
	@:overload(function(value : String) : Bool {})
	@:overload(function(value : cs.types.Int16) : Bool {})
	@:overload(function(value : cs.types.Int8) : Bool {})
	@:overload(function(value : haxe.Int64) : Bool {})
	@:overload(function(value : Int) : Bool {})
	@:overload(function(value : Single) : Bool {})
	@:overload(function(value : Float) : Bool {})
	@:overload(function(value : Decimal) : Bool {})
	@:overload(function(value : DateTime) : Bool {})
	@:overload(function(value : cs.types.Char16) : Bool {})
	static function ToBoolean(value : cs.types.UInt8) : Bool;
	@:overload(function(value : Bool) : cs.types.UInt8 {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : cs.types.UInt8 {})
	@:overload(function(value : Dynamic) : cs.types.UInt8 {})
	@:overload(function(value : cs.types.UInt16) : cs.types.UInt8 {})
	@:overload(function(value : cs.types.UInt64) : cs.types.UInt8 {})
	@:overload(function(value : UInt) : cs.types.UInt8 {})
	@:overload(function(value : String, fromBase : Int) : cs.types.UInt8 {})
	@:overload(function(value : String, provider : IFormatProvider) : cs.types.UInt8 {})
	@:overload(function(value : String) : cs.types.UInt8 {})
	@:overload(function(value : cs.types.Int16) : cs.types.UInt8 {})
	@:overload(function(value : cs.types.Int8) : cs.types.UInt8 {})
	@:overload(function(value : haxe.Int64) : cs.types.UInt8 {})
	@:overload(function(value : Int) : cs.types.UInt8 {})
	@:overload(function(value : Single) : cs.types.UInt8 {})
	@:overload(function(value : Float) : cs.types.UInt8 {})
	@:overload(function(value : Decimal) : cs.types.UInt8 {})
	@:overload(function(value : DateTime) : cs.types.UInt8 {})
	@:overload(function(value : cs.types.Char16) : cs.types.UInt8 {})
	static function ToByte(value : cs.types.UInt8) : cs.types.UInt8;
	@:overload(function(value : Bool) : cs.types.Char16 {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : cs.types.Char16 {})
	@:overload(function(value : Dynamic) : cs.types.Char16 {})
	@:overload(function(value : cs.types.UInt16) : cs.types.Char16 {})
	@:overload(function(value : cs.types.UInt64) : cs.types.Char16 {})
	@:overload(function(value : UInt) : cs.types.Char16 {})
	@:overload(function(value : String, provider : IFormatProvider) : cs.types.Char16 {})
	@:overload(function(value : String) : cs.types.Char16 {})
	@:overload(function(value : cs.types.Int16) : cs.types.Char16 {})
	@:overload(function(value : cs.types.Int8) : cs.types.Char16 {})
	@:overload(function(value : Single) : cs.types.Char16 {})
	@:overload(function(value : haxe.Int64) : cs.types.Char16 {})
	@:overload(function(value : Int) : cs.types.Char16 {})
	@:overload(function(value : Float) : cs.types.Char16 {})
	@:overload(function(value : Decimal) : cs.types.Char16 {})
	@:overload(function(value : DateTime) : cs.types.Char16 {})
	@:overload(function(value : cs.types.Char16) : cs.types.Char16 {})
	static function ToChar(value : cs.types.UInt8) : cs.types.Char16;
	@:overload(function(value : String) : DateTime {})
	@:overload(function(value : cs.types.UInt64) : DateTime {})
	@:overload(function(value : UInt) : DateTime {})
	@:overload(function(value : cs.types.UInt16) : DateTime {})
	@:overload(function(value : cs.types.Int8) : DateTime {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : DateTime {})
	@:overload(function(value : Dynamic) : DateTime {})
	@:overload(function(value : Single) : DateTime {})
	@:overload(function(value : haxe.Int64) : DateTime {})
	@:overload(function(value : Int) : DateTime {})
	@:overload(function(value : cs.types.Int16) : DateTime {})
	@:overload(function(value : Float) : DateTime {})
	@:overload(function(value : Decimal) : DateTime {})
	@:overload(function(value : DateTime) : DateTime {})
	@:overload(function(value : cs.types.Char16) : DateTime {})
	@:overload(function(value : cs.types.UInt8) : DateTime {})
	@:overload(function(value : Bool) : DateTime {})
	static function ToDateTime(value : String, provider : IFormatProvider) : DateTime;
	@:overload(function(value : Bool) : Decimal {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : Decimal {})
	@:overload(function(value : Dynamic) : Decimal {})
	@:overload(function(value : cs.types.UInt16) : Decimal {})
	@:overload(function(value : cs.types.UInt64) : Decimal {})
	@:overload(function(value : UInt) : Decimal {})
	@:overload(function(value : String, provider : IFormatProvider) : Decimal {})
	@:overload(function(value : String) : Decimal {})
	@:overload(function(value : cs.types.Int16) : Decimal {})
	@:overload(function(value : cs.types.Int8) : Decimal {})
	@:overload(function(value : haxe.Int64) : Decimal {})
	@:overload(function(value : Int) : Decimal {})
	@:overload(function(value : Single) : Decimal {})
	@:overload(function(value : Float) : Decimal {})
	@:overload(function(value : Decimal) : Decimal {})
	@:overload(function(value : DateTime) : Decimal {})
	@:overload(function(value : cs.types.Char16) : Decimal {})
	static function ToDecimal(value : cs.types.UInt8) : Decimal;
	@:overload(function(value : Bool) : Float {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : Float {})
	@:overload(function(value : Dynamic) : Float {})
	@:overload(function(value : cs.types.UInt16) : Float {})
	@:overload(function(value : cs.types.UInt64) : Float {})
	@:overload(function(value : UInt) : Float {})
	@:overload(function(value : String, provider : IFormatProvider) : Float {})
	@:overload(function(value : String) : Float {})
	@:overload(function(value : cs.types.Int16) : Float {})
	@:overload(function(value : cs.types.Int8) : Float {})
	@:overload(function(value : haxe.Int64) : Float {})
	@:overload(function(value : Int) : Float {})
	@:overload(function(value : Single) : Float {})
	@:overload(function(value : Float) : Float {})
	@:overload(function(value : Decimal) : Float {})
	@:overload(function(value : DateTime) : Float {})
	@:overload(function(value : cs.types.Char16) : Float {})
	static function ToDouble(value : cs.types.UInt8) : Float;
	@:overload(function(value : Bool) : cs.types.Int16 {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : cs.types.Int16 {})
	@:overload(function(value : Dynamic) : cs.types.Int16 {})
	@:overload(function(value : cs.types.UInt16) : cs.types.Int16 {})
	@:overload(function(value : cs.types.UInt64) : cs.types.Int16 {})
	@:overload(function(value : UInt) : cs.types.Int16 {})
	@:overload(function(value : String, fromBase : Int) : cs.types.Int16 {})
	@:overload(function(value : String, provider : IFormatProvider) : cs.types.Int16 {})
	@:overload(function(value : String) : cs.types.Int16 {})
	@:overload(function(value : cs.types.Int16) : cs.types.Int16 {})
	@:overload(function(value : cs.types.Int8) : cs.types.Int16 {})
	@:overload(function(value : haxe.Int64) : cs.types.Int16 {})
	@:overload(function(value : Int) : cs.types.Int16 {})
	@:overload(function(value : Single) : cs.types.Int16 {})
	@:overload(function(value : Float) : cs.types.Int16 {})
	@:overload(function(value : Decimal) : cs.types.Int16 {})
	@:overload(function(value : DateTime) : cs.types.Int16 {})
	@:overload(function(value : cs.types.Char16) : cs.types.Int16 {})
	static function ToInt16(value : cs.types.UInt8) : cs.types.Int16;
	@:overload(function(value : Bool) : Int {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : Int {})
	@:overload(function(value : Dynamic) : Int {})
	@:overload(function(value : cs.types.UInt16) : Int {})
	@:overload(function(value : cs.types.UInt64) : Int {})
	@:overload(function(value : UInt) : Int {})
	@:overload(function(value : String, fromBase : Int) : Int {})
	@:overload(function(value : String, provider : IFormatProvider) : Int {})
	@:overload(function(value : String) : Int {})
	@:overload(function(value : cs.types.Int16) : Int {})
	@:overload(function(value : cs.types.Int8) : Int {})
	@:overload(function(value : haxe.Int64) : Int {})
	@:overload(function(value : Int) : Int {})
	@:overload(function(value : Single) : Int {})
	@:overload(function(value : Float) : Int {})
	@:overload(function(value : Decimal) : Int {})
	@:overload(function(value : DateTime) : Int {})
	@:overload(function(value : cs.types.Char16) : Int {})
	static function ToInt32(value : cs.types.UInt8) : Int;
	@:overload(function(value : Bool) : haxe.Int64 {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : haxe.Int64 {})
	@:overload(function(value : Dynamic) : haxe.Int64 {})
	@:overload(function(value : cs.types.UInt16) : haxe.Int64 {})
	@:overload(function(value : cs.types.UInt64) : haxe.Int64 {})
	@:overload(function(value : UInt) : haxe.Int64 {})
	@:overload(function(value : String, fromBase : Int) : haxe.Int64 {})
	@:overload(function(value : String, provider : IFormatProvider) : haxe.Int64 {})
	@:overload(function(value : String) : haxe.Int64 {})
	@:overload(function(value : cs.types.Int16) : haxe.Int64 {})
	@:overload(function(value : cs.types.Int8) : haxe.Int64 {})
	@:overload(function(value : haxe.Int64) : haxe.Int64 {})
	@:overload(function(value : Int) : haxe.Int64 {})
	@:overload(function(value : Single) : haxe.Int64 {})
	@:overload(function(value : Float) : haxe.Int64 {})
	@:overload(function(value : Decimal) : haxe.Int64 {})
	@:overload(function(value : DateTime) : haxe.Int64 {})
	@:overload(function(value : cs.types.Char16) : haxe.Int64 {})
	static function ToInt64(value : cs.types.UInt8) : haxe.Int64;
	@:overload(function(value : Bool) : cs.types.Int8 {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : cs.types.Int8 {})
	@:overload(function(value : Dynamic) : cs.types.Int8 {})
	@:overload(function(value : cs.types.UInt16) : cs.types.Int8 {})
	@:overload(function(value : cs.types.UInt64) : cs.types.Int8 {})
	@:overload(function(value : UInt) : cs.types.Int8 {})
	@:overload(function(value : String, fromBase : Int) : cs.types.Int8 {})
	@:overload(function(value : String, provider : IFormatProvider) : cs.types.Int8 {})
	@:overload(function(value : String) : cs.types.Int8 {})
	@:overload(function(value : cs.types.Int16) : cs.types.Int8 {})
	@:overload(function(value : cs.types.Int8) : cs.types.Int8 {})
	@:overload(function(value : haxe.Int64) : cs.types.Int8 {})
	@:overload(function(value : Int) : cs.types.Int8 {})
	@:overload(function(value : Single) : cs.types.Int8 {})
	@:overload(function(value : Float) : cs.types.Int8 {})
	@:overload(function(value : Decimal) : cs.types.Int8 {})
	@:overload(function(value : DateTime) : cs.types.Int8 {})
	@:overload(function(value : cs.types.Char16) : cs.types.Int8 {})
	static function ToSByte(value : cs.types.UInt8) : cs.types.Int8;
	@:overload(function(value : Bool) : Single {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : Single {})
	@:overload(function(value : Dynamic) : Single {})
	@:overload(function(value : cs.types.UInt16) : Single {})
	@:overload(function(value : cs.types.UInt64) : Single {})
	@:overload(function(value : UInt) : Single {})
	@:overload(function(value : String, provider : IFormatProvider) : Single {})
	@:overload(function(value : String) : Single {})
	@:overload(function(value : cs.types.Int16) : Single {})
	@:overload(function(value : cs.types.Int8) : Single {})
	@:overload(function(value : haxe.Int64) : Single {})
	@:overload(function(value : Int) : Single {})
	@:overload(function(value : Single) : Single {})
	@:overload(function(value : Float) : Single {})
	@:overload(function(value : Decimal) : Single {})
	@:overload(function(value : DateTime) : Single {})
	@:overload(function(value : cs.types.Char16) : Single {})
	static function ToSingle(value : cs.types.UInt8) : Single;
	@:native("ToString") static function _ToString(value : Bool) : String;
	@:overload(function(value : cs.types.UInt16, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.UInt16) : String {})
	@:overload(function(value : cs.types.UInt64, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.UInt64) : String {})
	@:overload(function(value : UInt, provider : IFormatProvider) : String {})
	@:overload(function(value : UInt) : String {})
	@:overload(function(value : String, provider : IFormatProvider) : String {})
	@:overload(function(value : String) : String {})
	@:overload(function(value : cs.types.Int16, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.Int16, toBase : Int) : String {})
	@:overload(function(value : cs.types.Int16) : String {})
	@:overload(function(value : cs.types.Int8, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.Int8) : String {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : String {})
	@:overload(function(value : Dynamic) : String {})
	@:overload(function(value : haxe.Int64, provider : IFormatProvider) : String {})
	@:overload(function(value : haxe.Int64, toBase : Int) : String {})
	@:overload(function(value : haxe.Int64) : String {})
	@:overload(function(value : Int, provider : IFormatProvider) : String {})
	@:overload(function(value : Int, toBase : Int) : String {})
	@:overload(function(value : Int) : String {})
	@:overload(function(value : Single, provider : IFormatProvider) : String {})
	@:overload(function(value : Single) : String {})
	@:overload(function(value : Float, provider : IFormatProvider) : String {})
	@:overload(function(value : Float) : String {})
	@:overload(function(value : Decimal, provider : IFormatProvider) : String {})
	@:overload(function(value : Decimal) : String {})
	@:overload(function(value : DateTime, provider : IFormatProvider) : String {})
	@:overload(function(value : DateTime) : String {})
	@:overload(function(value : cs.types.Char16, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.Char16) : String {})
	@:overload(function(value : cs.types.UInt8, toBase : Int) : String {})
	@:overload(function(value : cs.types.UInt8, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.UInt8) : String {})
	@:overload(function(value : Bool, provider : IFormatProvider) : String {})
	@:overload(function(value : Bool) : String {})
	@:overload(function(value : cs.types.UInt16, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.UInt16) : String {})
	@:overload(function(value : cs.types.UInt64, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.UInt64) : String {})
	@:overload(function(value : UInt, provider : IFormatProvider) : String {})
	@:overload(function(value : UInt) : String {})
	@:overload(function(value : String, provider : IFormatProvider) : String {})
	@:overload(function(value : String) : String {})
	@:overload(function(value : cs.types.Int16, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.Int16, toBase : Int) : String {})
	@:overload(function(value : cs.types.Int16) : String {})
	@:overload(function(value : cs.types.Int8, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.Int8) : String {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : String {})
	@:overload(function(value : Dynamic) : String {})
	@:overload(function(value : haxe.Int64, provider : IFormatProvider) : String {})
	@:overload(function(value : haxe.Int64, toBase : Int) : String {})
	@:overload(function(value : haxe.Int64) : String {})
	@:overload(function(value : Int, provider : IFormatProvider) : String {})
	@:overload(function(value : Int, toBase : Int) : String {})
	@:overload(function(value : Int) : String {})
	@:overload(function(value : Single, provider : IFormatProvider) : String {})
	@:overload(function(value : Single) : String {})
	@:overload(function(value : Float, provider : IFormatProvider) : String {})
	@:overload(function(value : Float) : String {})
	@:overload(function(value : Decimal, provider : IFormatProvider) : String {})
	@:overload(function(value : Decimal) : String {})
	@:overload(function(value : DateTime, provider : IFormatProvider) : String {})
	@:overload(function(value : DateTime) : String {})
	@:overload(function(value : cs.types.Char16, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.Char16) : String {})
	@:overload(function(value : cs.types.UInt8, toBase : Int) : String {})
	@:overload(function(value : cs.types.UInt8, provider : IFormatProvider) : String {})
	@:overload(function(value : cs.types.UInt8) : String {})
	static function ToString(value : Bool, provider : IFormatProvider) : String;
	@:overload(function(value : Bool) : cs.types.UInt16 {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : cs.types.UInt16 {})
	@:overload(function(value : Dynamic) : cs.types.UInt16 {})
	@:overload(function(value : cs.types.UInt16) : cs.types.UInt16 {})
	@:overload(function(value : cs.types.UInt64) : cs.types.UInt16 {})
	@:overload(function(value : UInt) : cs.types.UInt16 {})
	@:overload(function(value : String, fromBase : Int) : cs.types.UInt16 {})
	@:overload(function(value : String, provider : IFormatProvider) : cs.types.UInt16 {})
	@:overload(function(value : String) : cs.types.UInt16 {})
	@:overload(function(value : cs.types.Int16) : cs.types.UInt16 {})
	@:overload(function(value : cs.types.Int8) : cs.types.UInt16 {})
	@:overload(function(value : haxe.Int64) : cs.types.UInt16 {})
	@:overload(function(value : Int) : cs.types.UInt16 {})
	@:overload(function(value : Single) : cs.types.UInt16 {})
	@:overload(function(value : Float) : cs.types.UInt16 {})
	@:overload(function(value : Decimal) : cs.types.UInt16 {})
	@:overload(function(value : DateTime) : cs.types.UInt16 {})
	@:overload(function(value : cs.types.Char16) : cs.types.UInt16 {})
	static function ToUInt16(value : cs.types.UInt8) : cs.types.UInt16;
	@:overload(function(value : Bool) : UInt {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : UInt {})
	@:overload(function(value : Dynamic) : UInt {})
	@:overload(function(value : cs.types.UInt16) : UInt {})
	@:overload(function(value : cs.types.UInt64) : UInt {})
	@:overload(function(value : UInt) : UInt {})
	@:overload(function(value : String, fromBase : Int) : UInt {})
	@:overload(function(value : String, provider : IFormatProvider) : UInt {})
	@:overload(function(value : String) : UInt {})
	@:overload(function(value : cs.types.Int16) : UInt {})
	@:overload(function(value : cs.types.Int8) : UInt {})
	@:overload(function(value : haxe.Int64) : UInt {})
	@:overload(function(value : Int) : UInt {})
	@:overload(function(value : Single) : UInt {})
	@:overload(function(value : Float) : UInt {})
	@:overload(function(value : Decimal) : UInt {})
	@:overload(function(value : DateTime) : UInt {})
	@:overload(function(value : cs.types.Char16) : UInt {})
	static function ToUInt32(value : cs.types.UInt8) : UInt;
	@:overload(function(value : Bool) : cs.types.UInt64 {})
	@:overload(function(value : Dynamic, provider : IFormatProvider) : cs.types.UInt64 {})
	@:overload(function(value : Dynamic) : cs.types.UInt64 {})
	@:overload(function(value : cs.types.UInt16) : cs.types.UInt64 {})
	@:overload(function(value : cs.types.UInt64) : cs.types.UInt64 {})
	@:overload(function(value : UInt) : cs.types.UInt64 {})
	@:overload(function(value : String, fromBase : Int) : cs.types.UInt64 {})
	@:overload(function(value : String, provider : IFormatProvider) : cs.types.UInt64 {})
	@:overload(function(value : String) : cs.types.UInt64 {})
	@:overload(function(value : cs.types.Int16) : cs.types.UInt64 {})
	@:overload(function(value : cs.types.Int8) : cs.types.UInt64 {})
	@:overload(function(value : haxe.Int64) : cs.types.UInt64 {})
	@:overload(function(value : Int) : cs.types.UInt64 {})
	@:overload(function(value : Single) : cs.types.UInt64 {})
	@:overload(function(value : Float) : cs.types.UInt64 {})
	@:overload(function(value : Decimal) : cs.types.UInt64 {})
	@:overload(function(value : DateTime) : cs.types.UInt64 {})
	@:overload(function(value : cs.types.Char16) : cs.types.UInt64 {})
	static function ToUInt64(value : cs.types.UInt8) : cs.types.UInt64;
}
